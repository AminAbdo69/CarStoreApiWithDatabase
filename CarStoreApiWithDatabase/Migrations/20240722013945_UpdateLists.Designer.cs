// <auto-generated />
using CarStoreApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarStoreApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240722013945_UpdateLists")]
    partial class UpdateLists
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarStoreApi.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Model")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarStoreApi.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            IsActive = false,
                            IsAdmin = true,
                            PasswordHash = new byte[] { 16, 1, 194, 144, 125, 144, 49, 216, 193, 190, 24, 178, 30, 132, 215, 66, 225, 108, 103, 141, 214, 152, 152, 138, 26, 30, 125, 171, 22, 32, 48, 182, 202, 168, 215, 12, 203, 27, 210, 143, 93, 189, 24, 87, 158, 81, 240, 27, 44, 56, 197, 144, 61, 152, 123, 227, 85, 103, 243, 187, 249, 87, 254, 0 },
                            PasswordSalt = new byte[] { 121, 194, 164, 246, 210, 223, 69, 108, 143, 152, 216, 80, 39, 207, 252, 174, 103, 215, 141, 235, 61, 246, 230, 95, 34, 182, 107, 194, 36, 167, 112, 36, 216, 202, 64, 7, 189, 31, 192, 77, 213, 80, 154, 224, 253, 121, 54, 130, 113, 201, 191, 120, 195, 122, 227, 122, 141, 99, 178, 229, 165, 67, 67, 247, 159, 1, 1, 36, 10, 118, 74, 127, 56, 13, 232, 69, 11, 145, 124, 138, 230, 91, 153, 242, 182, 57, 228, 180, 19, 43, 69, 238, 10, 56, 251, 56, 193, 150, 32, 40, 87, 138, 166, 152, 67, 117, 96, 238, 64, 42, 53, 214, 52, 173, 55, 165, 123, 207, 71, 87, 205, 142, 116, 138, 253, 115, 237, 188 },
                            UserName = "amin"
                        });
                });

            modelBuilder.Entity("CarUser", b =>
                {
                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.Property<int>("carsId")
                        .HasColumnType("int");

                    b.HasKey("UsersId", "carsId");

                    b.HasIndex("carsId");

                    b.ToTable("Recommendtion", (string)null);
                });

            modelBuilder.Entity("CarUser", b =>
                {
                    b.HasOne("CarStoreApi.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarStoreApi.Car", null)
                        .WithMany()
                        .HasForeignKey("carsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
