// <auto-generated />
using CarStoreApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarStoreApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240722012827_UpdateCar")]
    partial class UpdateCar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarStoreApi.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Model")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarStoreApi.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            IsActive = false,
                            IsAdmin = true,
                            PasswordHash = new byte[] { 211, 59, 245, 130, 53, 188, 199, 202, 94, 192, 213, 199, 224, 166, 131, 73, 85, 100, 249, 243, 0, 170, 25, 121, 69, 188, 136, 188, 221, 151, 129, 38, 110, 86, 62, 231, 21, 28, 202, 147, 191, 174, 119, 23, 46, 244, 80, 66, 209, 236, 149, 218, 102, 151, 85, 159, 70, 159, 232, 45, 112, 188, 238, 156 },
                            PasswordSalt = new byte[] { 165, 221, 149, 44, 38, 12, 66, 6, 56, 204, 83, 202, 29, 123, 10, 38, 54, 27, 128, 122, 66, 172, 93, 96, 71, 200, 231, 196, 82, 255, 96, 124, 78, 103, 124, 236, 167, 183, 211, 232, 137, 57, 171, 56, 42, 223, 72, 91, 196, 120, 89, 31, 233, 244, 51, 252, 69, 73, 81, 124, 252, 196, 22, 4, 206, 32, 242, 70, 189, 160, 93, 63, 119, 241, 234, 179, 136, 185, 54, 243, 169, 237, 1, 147, 66, 60, 218, 217, 3, 29, 252, 231, 200, 228, 232, 57, 168, 92, 109, 108, 223, 30, 128, 32, 221, 151, 191, 193, 105, 169, 161, 43, 223, 126, 61, 125, 245, 212, 83, 241, 122, 109, 27, 202, 178, 5, 216, 175 },
                            UserName = "amin"
                        });
                });

            modelBuilder.Entity("CarUser", b =>
                {
                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.Property<int>("carsId")
                        .HasColumnType("int");

                    b.HasKey("UsersId", "carsId");

                    b.HasIndex("carsId");

                    b.ToTable("Recommendtion", (string)null);
                });

            modelBuilder.Entity("CarUser", b =>
                {
                    b.HasOne("CarStoreApi.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarStoreApi.Car", null)
                        .WithMany()
                        .HasForeignKey("carsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
