// <auto-generated />
using CarStoreApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarStoreApi.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240722001839_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarStoreApi.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Model")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarStoreApi.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            IsActive = false,
                            IsAdmin = true,
                            PasswordHash = new byte[] { 198, 198, 234, 121, 98, 75, 116, 178, 104, 91, 68, 92, 214, 241, 6, 190, 59, 254, 233, 56, 205, 118, 246, 196, 213, 134, 63, 84, 79, 38, 171, 216, 224, 187, 249, 2, 242, 22, 180, 213, 58, 51, 231, 239, 152, 237, 140, 84, 155, 124, 161, 166, 147, 121, 111, 101, 17, 133, 146, 245, 22, 51, 52, 144 },
                            PasswordSalt = new byte[] { 116, 44, 239, 235, 99, 131, 160, 202, 30, 198, 130, 127, 178, 145, 179, 141, 90, 187, 149, 116, 74, 179, 220, 85, 119, 247, 142, 195, 125, 235, 96, 196, 145, 5, 233, 92, 4, 95, 242, 122, 37, 114, 231, 185, 231, 200, 41, 98, 5, 199, 182, 204, 215, 120, 253, 74, 110, 101, 141, 107, 66, 13, 166, 54, 243, 17, 242, 95, 164, 52, 123, 48, 195, 127, 67, 186, 203, 153, 130, 190, 197, 119, 240, 197, 201, 66, 10, 40, 128, 101, 107, 89, 129, 243, 249, 19, 110, 184, 1, 32, 17, 14, 71, 178, 3, 94, 146, 86, 244, 169, 151, 254, 108, 58, 6, 232, 254, 180, 85, 38, 213, 141, 85, 93, 59, 0, 203, 23 },
                            UserName = "amin"
                        });
                });

            modelBuilder.Entity("CarUser", b =>
                {
                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.Property<int>("carsId")
                        .HasColumnType("int");

                    b.HasKey("UsersId", "carsId");

                    b.HasIndex("carsId");

                    b.ToTable("Recommendtion", (string)null);
                });

            modelBuilder.Entity("CarUser", b =>
                {
                    b.HasOne("CarStoreApi.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarStoreApi.Car", null)
                        .WithMany()
                        .HasForeignKey("carsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
